wine = read.csv("Wine.csv")
str(wine)
View(wine)
summary(wine)
plot(wine$AGST, wine$Price)
abline(h = mean(wine$Price), col = "red")
#install the package
library(dplyr)
# load csv
train = read.csv("Assignment_Linear_Regression_Data_Train.csv")
# find the avg of the table
summary(train)
df <-data.frame(Q1=c(train$Gender))
df %>% count(Q1)
#another way of doing calculation
male <- subset(train, Gender =="Male")
precentage_male = nrow(male)/nrow(train)
precentage_male
model1 = lm(LOS~Temperature+ RespirationRate+ HeartRate + SystolicBP + DiastolicBP + SpO2, data = train)
summary(model1)
model2 = lm(LOS~Age + Gender + Race + Temperature+ RespirationRate+ HeartRate + SystolicBP + DiastolicBP + SpO2 + Haemoglobin + NumWBC + ArterialpO2 + Creatinine + Urea + GCS , data = train)
summary(model2)
model3 = lm(LOS~ ArterialpO2 + Creatinine + Urea + GCS , data = train)
summary(model3)
test = read.csv("Assignment_Linear_Regression_Data_Test.csv")
str(test)
#count for all variables
predictTest2 = predict(model2, newdata = test)
SSE2 = sum((test$LOS - predictTest2)^2)
SST2 = sum((test$LOS - mean(train$LOS))^2)
R2 = (1 - SSE2/SST2)
# the out-of-sample R^2
R2
#count for only vital signs
predictTest1 = predict(model1, newdata = test)
SSE1 = sum(( $LOS - predictTest1)^2)
test = read.csv("Assignment_Linear_Regression_Data_Test.csv")
str(test)
#count for all variables
predictTest2 = predict(model2, newdata = test)
SSE2 = sum((test$LOS - predictTest2)^2)
SST2 = sum((test$LOS - mean(train$LOS))^2)
R2 = (1 - SSE2/SST2)
# the out-of-sample R^2
R2
#count for only vital signs
predictTest1 = predict(model1, newdata = test)
SSE1 = sum((test$LOS - predictTest1)^2)
SST1 = sum((test$LOS - mean(train$LOS))^2)
R1 = (1 - SSE1/SST1)
# the out-of-sample R^2
R1
test = read.csv("Assignment_Linear_Regression_Data_Test.csv")
str(test)
#count for all variables
predictTest2 = predict(model2, newdata = test)
SSE2 = sum((test$LOS - predictTest2)^2)
SST2 = sum((test$LOS - mean(train$LOS))^2)
R2 = (1 - SSE2/SST2)
# the out-of-sample R^2
R2
#count for only vital signs
predictTest1 = predict(model1, newdata = test)
SSE1 = sum((test$LOS - predictTest1)^2)
SST1 = sum((test$LOS - mean(train$LOS))^2)
R1 = (1 - SSE1/SST1)
# the out-of-sample R^2
R1
baseball = read.csv("Moneyball.csv", stringsAsFactors = TRUE)
str(baseball)
#create a subset that only contains the data before 2002
moneyball = subset(baseball, Year < 2002)
str(moneyball)
#create a variable (RS-RA)
moneyball$RD = moneyball$RS - moneyball$RA
str(moneyball)
View(moneyball)
View(moneyball)
View(moneyball)
PredictWins = lm(W ~ RD, data = moneyball)
summary(PredictWins)
PredictRS = lm(RS ~ OBP + SLG + BA, data = moneyball)
summary(PredictRS)
View(PredictWins)
cor(data.frame(moneyball$OBP, moneyball$SLG, moneyball$BA))
PredictRS1 = lm(RS ~ OBP, data = moneyball)
summary(PredictRS1)
PredictRS2 = lm(RS ~ SLG, data = moneyball)
summary(PredictRS2)
PredictRS3 = lm(RS ~ BA, data = moneyball)
summary(PredictRS3)
PredictRS4 = lm(RS ~ SLG + OBP, data = moneyball)
summary(PredictRS4)
PredictRS4 = lm(RS ~ SLG + OBP, data = moneyball)
summary(PredictRS4)
PredictRS5 = lm(RS ~ BA + OBP, data = moneyball)
summary(PredictRS5)
PredictRS4 = lm(RS ~ SLG + OBP, data = moneyball)
summary(PredictRS4)
PredictRS5 = lm(RS ~ BA + OBP, data = moneyball)
summary(PredictRS5)
PredictRS6 = lm(RS ~ BA + SLG, data = moneyball)
summary(PredictRS6)
#comparing of these MLR -> we could know that SLG+ OBP is better fit model
PredictRS4 = lm(RS ~ SLG + OBP, data = moneyball)
#把summary 放進來
output=summary(PredictRS4)
output$r.squared
summary(output)
PredictRS5 = lm(RS ~ BA + OBP, data = moneyball)
summary(PredictRS5)
PredictRS6 = lm(RS ~ BA + SLG, data = moneyball)
summary(PredictRS6)
View(output)
PredictRA = lm(RA ~ OOBP + OSLG, data = moneyball)
summary(PredictRA)
install.packages("pacman")
#install package: pacman -> basic program R  function
#package in R
pacman::p_load(tidyverse, tidyquant, timetk)
install.packages("tidyquant")
install.packages("timetk")
install.packages("tidyverse")
compnay <-read.csv("data/SGCompany.csv")
company
company <-read.csv("data/SGCompany.csv")
company
Stockdaily <- company %>%
select(Symbol) %>%
tq_get(get ="stock.prices",
from = "2022-01-01",
to = "2022-12-31")
library(tidyverse)
detach("package:tidyverse", unload = TRUE)
library(tidyverse)
library(tidyquant)
library(timetk)
Stockdaily <- company %>%
select(Symbol) %>%
tq_get(get ="stock.prices",
from = "2022-01-01",
to = "2022-12-31")
View(Stockdaily)
View(Stockdaily)
company <-read.csv("data/SGCompany.csv")
company
Stock_daily <- company %>%
select(Symbol) %>%
tq_get(get ="stock.prices",
from = "2022-01-01",
to = "2022-12-31")
Stock_data <- Stock_daily %>%
left_join(company)
Stock_data %>%
filter(Name == "DBS Group") %>%
ggplot(aes(x = date, y = close)) +
geom_line() +
labs(title = "DBS Group Holdings Ltd (DBSDF) Daily Stock Price",
y = "Closing Price", x = "") +
theme_tq()
Stock_data %>%
filter(Name == "DBS Group") %>%
ggplot(aes(x = date, y = close)) +
geom_line() +
labs(title = "DBS Group Holdings Ltd (DBSDF) Daily Stock Price",
y = "Closing Price", x = "")
Stock_data %>%
filter(Name == "DBS Group") %>%
ggplot(aes(x = date, y = close)) +
geom_line() +
labs(title = "DBS Group Holdings Ltd (DBSDF) Daily Stock Price",
y = "Closing Price", x = "") +
theme_tq()
Stock_data %>%
group_by(Name) %>%
plot_time_series(date, close,
.facet_ncol   = 2,
.facet_scales = "free",
.interactive  = FALSE)
Stock_data %>%
group_by(Name) %>%
plot_time_series(date, close,
.facet_ncol   = 2,
.facet_scales = "free",
.interactive  = TRUE)
Stock_data %>%
group_by(Name) %>%
plot_time_series(date, close,
.facet_ncol   = 3,
.facet_scales = "free",
.interactive  = TRUE)
Stock_data %>%
group_by(Name) %>%
plot_time_series(date, close,
.facet_ncol   = 6,
.facet_scales = "free",
.interactive  = TRUE)
Stock_data %>%
group_by(Name) %>%
plot_time_series(date, close,
.facet_ncol   = 1,
.facet_scales = "free",
.interactive  = TRUE)
Stock_data %>%
group_by(Name) %>%
plot_time_series(date, close,
.facet_ncol   = 2,
.facet_scales = "free",
.interactive  = TRUE)
end <- as_date("2022-06-30")
start <- end - weeks(2)
Stock_data %>%
filter(Name == "DBS Group") %>%
filter(date >= start - days(2 * 15))
ggplot(aes(x=date, y=close)) +
geom_candlestick(aes(open=open,
high=high,
low=low,
close=close)) +
labs(title = "Daily stock prices of DBS Group")
end <- as_date("2022-06-30")
start <- end - weeks(2)
Stock_data %>%
filter(Name == "DBS Group") %>%
filter(date >= start - days(2 * 15))
ggplot(aes(x=date, y=close)) +
geom_candlestick(aes(open=open,
high=high,
low=low,
close=close)) +
labs(title = "Daily stock prices of DBS Group") +
coord_x_date(xlim = c(start, end)) +
theme_tq()
end <- as_date("2022-06-30")
start <- end - weeks(2)
Stock_data %>%
filter(Name == "DBS Group") %>%
filter(date >= start - days(2 * 15)) %>%
ggplot(aes(x=date, y=close)) +
geom_candlestick(aes(open=open,
high=high,
low=low,
close=close)) +
labs(title = "Daily stock prices of DBS Group") +
coord_x_date(xlim = c(start, end)) +
theme_tq()
Stock_data %>%
filter(Symbol == "D05.SI") %>%
filter(date >= start - days(2 * 15)) %>%
ggplot(aes(x = date, y = close)) +
geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
geom_ma(ma_fun = SMA, n = 5, linetype = 5, size = 1.25) +
geom_ma(ma_fun = SMA, n = 15, color = "red", size = 1.25) +
labs(title = "DBS Group Holdings Ltd Daily Stock Price",
subtitle = "5 and 15-Day SMA",
y = "Closing Price", x = "") +
coord_x_date(xlim = c(end - weeks(5), end)) +
theme_tq()
SGBank <- read_csv("data/SGBank.csv")
SGBank_daily <- SGBank %>%
select(Symbol) %>%
tq_get(get = "stock.prices",
from = "2020-04-01",
to = "2022-06-30")
View(SGBank_daily)
SGBank_returns_monthly  <- SGBank_daily %>%
group_by(Symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "monthly",
col_rename = "Ra")
SGBank_returns_monthly
wts <- c(0.4, 0.3, 0.3)
portfolio_growth_monthly <- SGBank_returns_monthly %>%
tq_portfolio(assets_col = Symbol,
returns_col = Ra,
weights = wts,
col_rename = "investment.growth",
wealth.index = TRUE) %>%
mutate(investment.growth = investment.growth * 100000)
ggplot(data = porfolio_returns_monthly,
aes(x = date, y = Ra)) +
geom_bar(stat = "identity",
fill = palette_light()[[1]])
ggplot(data = porfolio_returns_monthly,
aes(x = date, y = Ra)) +
geom_bar(stat = "identity",
fill = palette_light()[[1]]) +
labs(title = "Porfoli Returns",
subtitle = "40% DBS, 30% OCBC and 30% UOB",
caption = "Shows an above zero trend meaning
positive returns",
x = "", y = "Monthly Returns") +
geom_smooth(method = "lm") +
theme_tq() +
scale_color_tq() +
scale_y_continuous(labels = scales::precent)
wts <- c(0.4, 0.3, 0.3)
portfolio_growth_monthly <- SGBank_returns_monthly %>%
tq_portfolio(assets_col = Symbol,
returns_col = Ra,
weights = wts,
col_rename = "investment.growth",
wealth.index = TRUE) %>%
mutate(investment.growth = investment.growth * 100000)
ggplot(data = porfolio_returns_monthly,
aes(x = date, y = Ra)) +
geom_bar(stat = "identity",
fill = palette_light()[[1]]) +
labs(title = "Porfoli Returns",
subtitle = "40% DBS, 30% OCBC and 30% UOB",
caption = "Shows an above zero trend meaning
positive returns",
x = "", y = "Monthly Returns") +
geom_smooth(method = "lm") +
theme_tq() +
scale_color_tq() +
scale_y_continuous(labels = scales::precent)
wts <- c(0.4, 0.3, 0.3)
porfolio_returns_monthly <- SGBank_returns_monthly %>%
tq_portfolio(assets_col = Symbol,
returns_col = Ra,
weights = wts,
col_rename = "Ra")
ggplot(data = porfolio_returns_monthly,
aes(x = date, y = Ra)) +
geom_bar(stat = "identity",
fill = palette_light()[[1]]) +
labs(title = "Porfoli Returns",
subtitle = "40% DBS, 30% OCBC and 30% UOB",
caption = "Shows an above zero trend meaning
positive returns",
x = "", y = "Monthly Returns") +
geom_smooth(method = "lm") +
theme_tq() +
scale_color_tq() +
scale_y_continuous(labels = scales::precent)
ggplot(data = porfolio_returns_monthly,
aes(x = date, y = Ra)) +
geom_bar(stat = "identity",
fill = palette_light()[[1]]) +
labs(title = "Porfoli Returns",
subtitle = "40% DBS, 30% OCBC and 30% UOB",
caption = "Shows an above zero trend meaning
positive returns",
x = "", y = "Monthly Returns") +
geom_smooth(method = "lm") +
theme_tq() +
scale_color_tq() +
scale_y_continuous(labels = scales::percent)
SGBank_returns_monthly
wts <- c(0.4, 0.3, 0.3)
portfolio_growth_monthly <- SGBank_returns_monthly %>%
tq_portfolio(assets_col = Symbol,
returns_col = Ra,
weights = wts,
col_rename = "investment.growth",
wealth.index = TRUE) %>%
mutate(investment.growth = investment.growth * 100000)
View(SGBank_returns_monthly)
